generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    characters    Character[]
    ownedGroups   Group[]     @relation("OwnedGroups")
    groups        Group[]     @relation("GroupMembers")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Group {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation("OwnedGroups", fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    members    User[]      @relation("GroupMembers")
    characters Character[]

    @@index([name])
}

enum GearStatus {
    BiS
    NeedsTomestone
    NeedsRaidDrop
}

enum GearSlot {
    Weapon
    Head
    Body
    Gloves
    Legs
    Feet
    Earrings
    Necklace
    Bracelet
    Ring1
    Ring2
}

model GearPiece {
    id          String     @id @default(cuid())
    type        GearSlot
    status      GearStatus
    character   Character  @relation(fields: [characterId], references: [id])
    characterId String
}

model Character {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String

    group   Group  @relation(fields: [groupId], references: [id], onDelete: Cascade)
    groupId String

    gear GearPiece[]

    @@unique([name, groupId, ownerId])
    @@index([name])
}
